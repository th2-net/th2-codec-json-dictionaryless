plugins {
    id 'com.palantir.docker' version '0.25.0'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'application'
    id "org.owasp.dependencycheck" version "7.2.0"
    id 'org.jetbrains.kotlin.kapt' version "${kotlin_version}"
}

dependencyCheck {
    format='HTML'
    failBuildOnCVSS=5
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()

    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }

    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    mavenLocal()

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

dependencies {
    api platform("com.exactpro.th2:bom:4.2.0")

    implementation 'com.exactpro.th2:common:5.3.0-json-raw-body-+' //FIXME: migrate to release
    implementation 'com.exactpro.th2:codec:5.2.0-new-proto-+' //FIXME: migrate to release

    implementation "com.fasterxml.jackson.core:jackson-databind"

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"

    compileOnly "com.google.auto.service:auto-service:1.1.0"
    kapt "com.google.auto.service:auto-service:1.1.0"
}

application {
    mainClassName 'com.exactpro.th2.codec.MainKt'
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

test {
    useJUnitPlatform()
}